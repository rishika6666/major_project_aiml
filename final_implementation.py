# -*- coding: utf-8 -*-
"""final implementation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ne9ABjJINiS5fbgHnT0zLNGgngkEDZju

# **TRANSCRIPTION / CAPTION / SUBTITLES / GENERATION OF YOUTUBE VIDEOS**

**Description of the problem statement:**


*   An **Artificial Intelligence Model** which generates **Transcriptions for youtube videos**.
*   
A transcription is basically a  document made by copying down in writing something that you listen to, like audio tapes, an interview, or comments made during a meeting(hypothetical situation)or maybe for a particular video.

**Dataset worked upon :**
**Mr-beast YouTube Videos**

**About this dataset**

The MrBeast YouTube dataset is a collection of transcriptions for videos from the MrBeast YouTube channel. It includes a variety of content, ranging from challenges and stunts to philanthropic efforts and charitable giving.
The dataset is organized into individual records for each video, with the following fields:

* thumbnail_url: Video Thumbnail Url
* publish_date: Video Publish Date
* keywords: Video Keywords
* description: Video Description
* List item
* rating: Video Rating
* channel_id: Video Channel ID
* channel_title: Video Author
* title: Video Title
* views: Number Of Views
* length: Video Length
* transcript: Video Transcript

The dataset is primarily intended for use in natural language processing tasks, such as speech recognition, language translation, and sentiment analysis. It could also be used for research on YouTube content or online video trends more generally.

**IMPORTING THE CSV FILE (DATASET) INTO GOOGLE COLLABORATORY NOTEBOOK**
"""

import pandas as pd

df = pd.read_csv("mrbeast.csv")

#Access the CSV File in Google Colaboratory
#reading the CSV file into a dataframe

"""**EXPLORATORY DATA ANALYSIS**"""

df.head()
#Displaying the rows and columns of dataset

print(df.shape)
#printing the data dimensionality that is , the total number of rows and columns present in the dataset

print(df.columns)
#displaying the column headings in total

print(df.info())
# to output some general information about the dataframe

df.describe()
# to show basic statistical characteristics of each numerical feature (int64 and float64 types):
#number of non-missing values, mean, standard deviation, range, median, 0.25 and 0.75 quartiles.

df['rating'] = df['rating'].fillna(0)
print(df)
#replacing the nan values of 'rating' column in the dataframe with '0'

print(df['transcript'].iloc[10])

"""# **Splitting the data into training and testing**

"""

# Select the relevant features for X_train
X_train = df[["title", "views", "length","rating","description","keywords","publish_date","thumbnail_url","channel_title","channel_id"]]

# Select the target variable for y_train
y_train = df["transcript"]

from sklearn.model_selection import train_test_split

# Assuming you already have X_train and y_train from your dataset
# Specify the test size (e.g., 20% of the data) and a random seed for reproducibility
test_size = 0.2
random_seed = 42

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=test_size, random_state=random_seed)

# X_train and y_train now contain your training data
# X_test and y_test now contain your testing data

"""# **Defining an ASR (Automatic Speech Recognition) model**"""

pip install tensorflow tensorflow-io

import tensorflow as tf
import tensorflow_io as tfio
import numpy as np

# Define a simple ASR model
def create_asr_model(input_shape, output_vocab_size):
    model = tf.keras.Sequential([
        tf.keras.layers.Input(shape=input_shape),
        tf.keras.layers.LSTM(128, return_sequences=True),
        tf.keras.layers.Dense(output_vocab_size, activation='softmax')
    ])
    return model

# Define some hyperparameters
input_shape = (None, 13)  # Example MFCC features
output_vocab_size = 30  # Example vocabulary size (number of characters)

# Create the ASR model
model = create_asr_model(input_shape, output_vocab_size)

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Generate some example data (replace with your own dataset)
# X should be MFCC features, and y should be the corresponding transcriptions
X = np.random.randn(100, 100, 13)
y = np.random.randint(0, output_vocab_size, size=(100, 50))

"""# **Caption Generation**

**Installation of Python Packages using pip**
"""

!pip install pytube
!pip install SpeechRecognition
!pip install moviepy

#These commands will use pip to install the pytube, SpeechRecognition, and moviepy packages.

"""**Installation of the youtube-transcript-api package**"""

!pip install youtube-transcript-api

#youtube-transcript-api allows us to use its features for retrieving YouTube video transcripts.

"""**Importing several other Python Libraries**"""

import os
import shutil
import moviepy.editor as mp
from pytube import YouTube
import speech_recognition as sr


#os: Used for interacting with the operating system, like working with files and directories.
#shutil: Provides high-level file operations, such as copying and moving files.
#moviepy.editor as mp: A library for video editing and manipulation.
#pytube.YouTube: Used to work with YouTube videos, including downloading them.
#speech_recognition as sr: A library for performing speech recognition.

from pytube import YouTube
from youtube_transcript_api import YouTubeTranscriptApi

# Importing the YouTube class from the pytube library and the
#YouTubeTranscriptApi class from the youtube_transcript_api library.

print(df['title'].iloc[32])
#getting the tile of the youtube video we are about to use for the model

# YouTube video URL
youtube_url = "https://youtu.be/iUzi5JmJNWc?si=fnjDOmlzud4dINuf"

# Downloading the video
yt = YouTube(youtube_url)
video_stream = yt.streams.filter(progressive=True, file_extension='mp4').order_by('resolution').desc().first()
video_stream.download()

# Get video ID
video_id = yt.video_id

# Fetch captions
captions = YouTubeTranscriptApi.get_transcript(video_id)

# Display captions
for caption in captions:
    start_time = caption['start']
    end_time = caption['start'] + caption['duration']
    text = caption['text']
    print(f"{start_time} - {end_time}: {text}")

"""# **Predicting Accuracy of the Model for Trancript Generation**"""

import nltk

# Download the missing data files
nltk.download('punkt')

# Import the necessary libraries
import nltk
from nltk.metrics import edit_distance

# Function to calculate accuracy, word error rate, and character error rate
def evaluate_transcriptions(generated_transcription, reference_transcription):
    # Tokenize the transcriptions into words
    generated_tokens = nltk.word_tokenize(generated_transcription.lower())
    reference_tokens = nltk.word_tokenize(reference_transcription.lower())

    # Calculate accuracy
    correct_words = sum(1 for gen, ref in zip(generated_tokens, reference_tokens) if gen == ref)
    accuracy = correct_words / len(reference_tokens)

    # Calculate Word Error Rate (WER)
    wer = edit_distance(generated_tokens, reference_tokens) / len(reference_tokens)

    # Calculate Character Error Rate (CER)
    cer = edit_distance(generated_transcription.lower(), reference_transcription.lower()) / len(reference_transcription)

    return accuracy, wer, cer

# Load your model-generated transcriptions and reference transcriptions
generated_transcriptions = ["This video is sponsored by PUBG Mobile for their new zombie mode. this is a special partnership with resident Evil 2, where you can fight zombies and collect vaccines for exclusive event items. today, we're gonna be talking about because- What? Oh my God. I guess I'm a zombie now. the only logical thing to do is invade our city. Let's go. I look too scary, Tareq? - You look pretty scary. It's not done yet too. - We paid dozens of people on Craigslist a hundred dollars to come in and take surveys. They have no idea but me and a hundred other zombies are gonna storm the room and scare them. All right. So we're gonna be hiding back here and the rest are gonna storm through the door. - Oh my God! - Oh my God! - That was a good reaction. - I don't wanna look. - High five. Just one quick high five. - I'm sorry. - It's just a prank. You're good. How do you feel right now? What was the scariest part? Hi, how are you? - Oh my God. What the . - Are you okay? - No. Oh my gosh. You guys scared the out of me. - We're gonna be hiding under these tables. Next, we're gonna be sitting at the tables, taking surveys, and then we're all gonna pop up and see how they react. - My God. I told you, we're gonna wait four hours, have this. - We just need you to write how scared you were. That was all. - I'll give you guys a four. - Oh. - And now we're on the bus, and we're gonna head downtown and scare some people. - Is it safe to go by these guys. - Yes, sir. - Are you gonna cannibalize me or what? - We just did our first destination. Now we're onto the next one. When you watch T-Series, you get the T-Virus. And this is what happens when you get the T-Virus. Thank you, PUBG, for allowing us to stop the T-Virus. - Hey man, I'm from the 919, bro. I don't play that. - Wait. Can you just act scared for one second? - Perfect. We got it. - All right, we need to leave. We gotta go. - We gotta go. - The lady on the stage was like, Who's that? What's up, man? - Oh, nice . - Hey, Chris, what are you gonna order? - I can't eat anything. I don't have a jaw. So I'm just gonna drink a drink. Can I get two fingers and a toe? - I'm gonna get a drink. - So what do you guys do? - We're a dance team. - You guys should have a dance off with one of our zombies. - Facebook Live. - Whoa. - Oh my God! - Yo, what is this? - Sorry, sorry. I'm so sorry. - Don't look at me. Whoa. Is that a thrower of flame? Well, if you wanna use your own thrower of flame, download PUBG Mobile. Let's get back to it. - Yo, what are you doing? - Dude, I'm playing PUBG Mobile. - Good. It's a great app, but you can play it after . - All right. You guys ready for this next location? - Dude, I love your hoody. - Thank you. I love this hoody. - I like it. - We like. - Dude. - But she's got one pretty permanent. This is crazy. - I'm gonna get a makeover. Does it look nice? - Oh! The power of Christ compels you. The power of Christ compels you. - You wanna take a look at a board? - What the ? - So I know a cure, but it only works if we exterminate the other zombies. He had the Nerf guns. Let's do it. Hey, doctor. Those are the potions you told us about? - It's not working. Why is it not working? - In order for the potions to work, - Why didn't you just say that? Let's go do it, boys. Get in formation, let's do it, boys. - Yeah! - All right, guys. That was a good . Let's get to the car and drink the potion. - Yeah. - Yeah. - Woo - Man, I can't believe this energy drink cured us. All right. Chandler, take us to the desert, man. - Why are we going to the desert? - 'Cause zombies don't survive in the desert. I want all of you guys to play a PUBG Mobile zombie game. And whoever kills the most zombies gets $2,000. - Whoa. - Whoa. - Whoa. - Deal. - Two grand on the line. Go, boys. - Oh no! Get him. - I'm gone. No! - Oh. - They're almost down. - Oh. - They're almost down. - There's a zombie coming. - Enemies ahead. - They're all around me. Spitting on me. Wasted all of our ammo. That was so stupid. - That was a mistake. - Can you get a thrower of fire? - Oh! - Oh. - Oh my God, I'm getting shot up. - Oh. - Chris. - He's wrecking me. To your right. - Boom. Got him. - Oh my God! - Chris. - He's wrecking me. To your right. - Boom. Got him. Zombies killed, 80. - How many do you have? - 103. - Ah. - Yes. - Chandler, did you just win your first challenge? - Yes, sir. I did. - If what we did looked fun to you, click the link in the description or just download PUBG Mobile for free. - Also, if you do play the game, upload a screenshot of your highest zombie kill with #ENDTVIRUS. - There's no reason not to. It's free to play. You can kill zombies, collect vaccines, stop the T-Virus, like we were doing earlier today in our recording. It's just a good time. You can play it whenever and wherever on your phone. We're here at the desert, boys. See, the trip just flew by. We're having so much fun playing PUBG. - Sweet. - Thank you. - All right. - Let's go, guys. - Hey, guys. Thank you so much for helping us out today for being zombies. Everybody here is gonna get paid a good amount of money, like $200. - Yay. - I would say it, but my mouth literally doesn't work. I appreciate it. - Thank you for coming out. Thanks for coming out.  # Replace with your model's generated transcriptions"]
reference_transcriptions = ["In this video sponsored by PUBG Mobile for their new zombie mode, this is a special partnership with Resident Evil 2, where you can fight zombies and collect vaccines for exclusive event items. Today, we're gonna be about because- What? Oh my God. I guess I'm a zombie now. The only  to do is invade our city. Let's go. I look too scary, Tareq? You look pretty scary. It's not done yet too. We paid dozens of people on Craigslist a hundred dollars to come in and take surveys. They have no idea, but me and a hundred other zombies are gonna storm the room and scare them. Alright. So we're gonna be hiding back here, and the rest are gonna storm through the door. Oh my God! Oh my God! That was a good reaction. I don't wanna look. High five. Just one quick high five. I'm sorry. It's just a prank. You're good. How do you feel right now? What was the scariest part? Hi, how are you? Oh my God. What the . Are you okay? No. Oh my gosh. You people scared the out of me. We're gonna be hiding under these tables. Next, we're gonna be sitting at the tables, taking surveys, and then we're all gonna pop up and see how they react. My God. I told you, we're gonna wait four hours, have this. We just need you to write how scared you were. That was all. I'll give you people a four. And now we're on the bus, and we're gonna head downtown and scare some people. Is it safe to go by these people? Yes, sir. Are you gonna cannibalize me or what? We just did our first destination. Now we're onto the next one. When you watch T-Series, you get the T-Virus. And this is what happens when you get the T-Virus. Thanks, PUBG, for allowing us to stop the T-Virus. Hey man, I'm from the 919, bro. I don't play that. Wait. Can you just act scared for one second? perfect. We got it. Alright, we need to leave. We gotta go. The lady on the stage was like, Who's that? What's up, man? Oh, nice . hey, Chris, what are you gonna order? I can't eat anything. I don't have a jaw. So I'm just gonna drink a drink. Can I get two fingers and a toe? I'm gonna get a drink. So what do you people do? We're a dance team. You people should have a dance off with one of our zombies. Facebook Live. Whoa. Oh my God! Yo, what is this? Sorry, sorry. I'm so sorry. Don't look at me. Whoa. Is that a thrower of flame? Well, if you wanna use your own thrower of flame, download PUBG Mobile. Let's get back to it. Yo, what are you doing? Dude, I'm playing PUBG Mobile. Good. It's a great app, but you can play it after . Alright. You people ready for this next location? Dude, I love your hoody. Thank you. I love this hoody. I like it. But she's got one pretty permanent. This is crazy. I'm gonna get a makeover. Does it look nice? Oh! the power of Christ compels you. about? It's not working. Why is it not working? In order for the potions to work, Why didn't you just say that? Let's go do it, people. Get in formation, let's do it, people. Yeah! Alright, people. That was a good . Let's get to the car and drink the potion. Yeah. Yeah. Woo Man, I can't believe this energy drink cured us. Alright. Chandler, take us to the desert, man. Why are we going to the desert? 'Cause zombies don't survive in the desert. I want all of you people to play a PUBG Mobile zombie game. And whoever kills the most zombies gets $2,000. Whoa. Whoa. Whoa. Deal. Two grand on the line. Go, people. Oh no! Get him. I'm gone. No! Oh. They're almost down. Oh. They're almost down. There's a zombie coming. Enemies ahead. They're all around me. Spitting on me. Wasted all of our ammo. That was so stupid. That was a mistake. Can you get a thrower of fire? Oh! Oh. Oh my God, I'm getting shot up. Oh. Chris. He's wrecking me. To your right. Boom. Got him. Oh my God! Chris. He's wrecking me. To your right. Boom. Got him. Zombies killed, 80. How many do you have? 103. Ah. Yes. Chandler, did you just win your first challenge? Yes, sir. I did. If what we did looked fun to you, click the link in the description or just download PUBG Mobile for free. Also, if you do play the game, upload a screenshot of your highest zombie kill with #ENDTVIRUS. There's no reason not to. It's free to play. You can kill zombies, collect vaccines, stop the T-Virus, like we were doing earlier today in our recording. It's just a good time. You can play it whenever and wherever on your phone. We're here at the desert, people. See, the trip just flew by. We're having so much fun playing PUBG. Sweet. Thanks. Alright. Let's go, people. Hey, people. Thanks so much for helping us out today for being zombies. Everybody here is gonna get paid a good amount of money, like $200. Yay. I would say it, but my mouth literally doesn't work. I appreciate it. Thanks for coming out. Thanks for coming out. Appre"]  # Replace with reference transcriptions
# Evaluate the transcriptions
accuracy, wer, cer = evaluate_transcriptions(generated_transcription, reference_transcription)

# Print the evaluation metrics
print("Accuracy:", accuracy)
print("Word Error Rate (WER):", wer)
print("Character Error Rate (CER):", cer)

"""# **Exporting Transcriptions**

Allow users to download the transcriptions as a text file or in a format suitable for printing or sharing.
"""

filename = f"{video_id}_transcription.txt"

with open(filename, 'w', encoding='utf-8') as file:
    for caption in captions:
        text = caption['text']
        file.write(text + '\n')

print(f"Transcriptions saved to '{filename}'.")

"""# **Punctuation and Formatting**
Enhancing the model to include proper punctuation and formatting in the generated captions, improving their readability and clarity.
"""

import re

# Example generated transcription
generated_transcription = "this is an example of generated text without punctuation it can be challenging to read and understand"

# Add punctuation after each sentence
def add_punctuation(text):
    sentences = re.split(r'(?<=[.!?]) +', text)
    punctuated_sentences = [s.capitalize() + '.' for s in sentences]
    return ' '.join(punctuated_sentences)

# Add line breaks for better readability
def add_formatting(text):
    lines = re.split(r'(?<=[.!?])', text)
    formatted_text = '<br>'.join(lines)
    return formatted_text

# Apply punctuation and formatting
transcription_with_punctuation = add_punctuation(generated_transcription)
formatted_transcription = add_formatting(transcription_with_punctuation)

print("Generated Transcription:")
print(generated_transcription)
print("\nTranscription with Punctuation:")
print(transcription_with_punctuation)
print("\nFormatted Transcription:")
print(formatted_transcription)

"""# **Handling Non-speech sounds**
Handling non-speech sounds in YouTube video transcriptions involves identifying and labeling non-speech sound events within the video's audio track.
"""

pip install pydub

from pydub import AudioSegment
from pydub.playback import play

# Load the audio file
audio_file_path = "/content/I Hope This Magic Trick Works.mp4"
audio = AudioSegment.from_file(audio_file_path)

# Define non-speech sound labels and their start and end times (in milliseconds)
non_speech_events = [
    {"label": "applause", "start": 1000, "end": 5000},
    {"label": "music", "start": 8000, "end": 15000},
    # Add more non-speech events as needed
]

# Generate annotated audio with non-speech labels
annotated_audio = audio
for event in non_speech_events:
    start_time = event["start"]
    end_time = event["end"]
    label = event["label"]

    annotated_audio = annotated_audio.overlay(audio[start_time:end_time], position=start_time)

# Save the annotated audio to a file
output_path = "annotated_audio.mp4"
annotated_audio.export(output_path, format="mp4")

# Play the annotated audio
play(annotated_audio)

"""# **Profanity-Check**
The captions containing profanity will be replaced with "**". Captions without profanity will be displayed as is.
"""

!pip install profanity-check
!pip install profanity-check scikit-learn
!pip install better_profanity

from better_profanity import profanity
# Process and display captions with profanity filtering
for caption in captions:
    start_time = caption['start']
    end_time = caption['start'] + caption['duration']
    text = caption['text']

    # Perform profanity filtering using better_profanity
    filtered_text = profanity.censor(text)

    print(f"{start_time} - {end_time}: {filtered_text}")



#for the given youtube video , a profanity-check has been done in which, in the output, any profane words in the
#original captions will be replaced with "**" using the better_profanity library's censor function.
#for example : refer to the line 126.896 - 128.441,65.345 - 67.595, or 70.702 - 74.49.

"""# **Conclusion**

In this code, a range of Python libraries, including **pytube**, **SpeechRecognition**, **moviepy**, and **youtube-transcript-api**, are imported to facilitate various operations related to YouTube videos. The script downloads a specific YouTube video using the pytube library and retrieves its captions using the youtube-transcript-api. The captions are then displayed, providing information about the timing and associated text for each caption. This code showcases how to interact with YouTube videos programmatically, from downloading videos to extracting and displaying their captions.
The **Mrbeast Youtube videos dataset** provided us with a lot many compilation of mrbeast youtube videos , to which we had created **manual transcripts** so that it could be used in generating the captions at different timestamps of a particular youtube video.
"""